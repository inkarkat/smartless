#!/bin/sed -uf

## Reverse the order of characters that comprise ANSI escape sequences (not just
## coloring) in the output.
##
## Usage: reverseAnsi FILE [...]
## Usage: cat FILE [...] | reverseAnsi

t continue
:continue
# Reverse an ANSI escape sequence.
# Begin by embedding the first unprocessed (i.e. no following newline
# characters) ANSI between two newlines. This avoids that phantom ANSI that are
# created by reversing a previous ANSI are processed as well. For example,
# ^[[1m[^[0m is turned into m1[^[[m0[^[, and the ^[[m would be erroneously
# reversed as well.
# Add a third newline to mark the end of the processing; the first two newlines
# move inwards as the ANSI is reversed, but we need a static marker as well so
# that the continuation will pick it up from there. Without that, following text
# like [r is combined with the previous reversed ANSI (which now ends with ^[)
# and interpreted (and reversed) as an ANSI ^[[r itself!
s#\(\x1b\[[0-9:;?]*[[:alpha:]]\)\([^\n]*\)$#\n\1\n\n\2#
T end # No more ANSIs; done.

# Move first character at the end. The regexp matches until there are zero or
# one characters between the markers. The end assertion ensures that only the
# last, active ANSI is reversed.
t reverse
:reverse
s#\(\n[^\n]\)\([^\n]*\)\([^\n]\n\)\([^\n]*\)\n\([^\n]*\)$#\3\2\1\4\n\5#
t reverse
b continue  # Rinse and repeat.

:end
# Remove all newline markers.
s/\n//g
