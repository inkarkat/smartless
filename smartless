#!/usr/bin/env bash

# smartless - a pager similar to less, but smarter
#
# Works like the pager 'less', but does not enter the pager mode if the document
# is short.
# Inspired by http://unix.stackexchange.com/questions/107315/

# ------------------------------------------------------------------------------

# Copyright 2015 Stefan Heule
# Copyright 2017-2020 Ingo Karkat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ------------------------------------------------------------------------------

# Skip when output is not to a terminal, but instead smartless is used inside a pipe.
[ -t 1 ] || exec cat

# Number of lines to directly display before switching to less.
if [ -z "$SMARTLESS_NUM_LINES" ] ; then
    # Default to 5 lines less than the screen height.
    [ -n "$LINES" ] || LINES=$(tput lines 2>/dev/null)
    SMARTLESS_NUM_LINES=$((${LINES:-20} - 5))
fi

[ -n "$COLUMNS" ] || COLUMNS=$(tput cols)

: ${SMARTLESS_PAGER:=less} # pager to be used
: ${SMARTLESS_PAGER_ARGUMENTS=-iR} # default arguments to the pager

# Highlighting of messages.
: ${SMARTLESS_COLOR='\033[38;5;2m'}
: ${SMARTLESS_COLOR_OFF='\033[0m'}

# Clean up captured output after it hasn't been accessed for 14 days; any
# arguments to "find" can be used here.
: ${SMARTLESS_CAPTURE_PRUNE_FINDARGS='-atime +14'}

typeset -a lessArgs=()
while [ $# -ne 0 ]
do
  case "$1" in
    -[bhjkoOpPtTxyz#])    lessArgs+=("$1" "$2"); shift; shift;;
    -[bhjkoOpPtTxyz#]?*)  lessArgs+=("$1"); shift;;
    --)                   shift; break;;
    --*)                  lessArgs+=("$1"); shift;;
    [-+]*)                lessArgs+=("$1"); shift;;
    *)                    break;;
  esac
done

if [ $# -gt 0 ]; then
  if [ $(cat -- "$@" 2>/dev/null | wc -l) -gt $SMARTLESS_NUM_LINES ]; then
    exec $SMARTLESS_PAGER $SMARTLESS_PAGER_ARGUMENTS "${lessArgs[@]}" -- "$@"
  else
    cat -- "$@" | "${BASH_SOURCE[0]}" "${lessArgs[@]}"
    exit $?
  fi
fi


typeset -a NOWRAP=()
countNetLines()
{
  # To get an upper bound for the line width without invoking external commands,
  # expand tabs to 8 spaces and turn everything but non-printable ASCII
  # characters into two spaces (so, assume it's a double-width character).
  local lineWidth="${line//	/        }"
  lineWidth="${lineWidth//[\{\}]/x}"  # Somehow cannot include these in the negative collection, so turn them into an ASCII character.
  lineWidth="${lineWidth//[^ -z]/  }"
  lineWidth=${#lineWidth}

  if [ $lineWidth -le $COLUMNS ]; then
    let n+=1
    return
  fi


  # Lazily start a coproc to filter individual lines; this is much more
  # efficient than starting a new process for each line.
  if [ ${#NOWRAP[@]} -eq 0 ]; then
    coproc NOWRAP { nowrap --unbuffered --columns="$COLUMNS" --wrap; }
  fi

  local wrappedLine
  printf '%s\n' "$line" >&"${NOWRAP[1]}"

  while read -r -t 0.1 -u "${NOWRAP[0]}" wrappedLine
  do
    let n+=1
  done
}

n=0
lines=

# Read and display enough lines to fill most of the terminal.
while [ $n -lt $SMARTLESS_NUM_LINES ] && IFS= read -r line; do
  if [[ $n -eq 0 ]]; then
    lines="$line"
    printf '%s' "$line"
  else
    lines="$lines"$'\n'"$line"
    printf '\n%s' "$line"
  fi
  countNetLines
  line=''
done
earlyIncompleteLine="$line"

if [ ${#NOWRAP[@]} -gt 0 ]; then
  # Close the coproc as it isn't used any longer and doesn't need to hang around
  # while the pager runs.
  eval "exec ${NOWRAP[1]}>&-"
fi


# If the input is longer, run the pager.
if IFS= read -r line; then
  if [[ -d "$SMARTLESS_CAPTURE_DIR" ]]; then
    captureFilespec=$(mktemp --tmpdir="${SMARTLESS_CAPTURE_DIR}" "${SMARTLESS_CAPTURE_TEMPLATE:-XXXXXX}" 2>/dev/null || echo "${SMARTLESS_CAPTURE_DIR}/$$$RANDOM")

    # Run housekeeping jobs in the background, to avoid blocking the output.
    (
      if [[ "$SMARTLESS_CAPTURE_PRUNE_FINDARGS" ]]; then
        # Clean up old captures.
        find "$SMARTLESS_CAPTURE_DIR" -maxdepth 1 $SMARTLESS_CAPTURE_PRUNE_FINDARGS -delete &> /dev/null
      fi
      if type -t rdfind >/dev/null; then
        # Save disk space by de-duplicating previous (the current one may still be
        # streamed in) captures via hard links.
        rdfind -makehardlinks true -outputname /dev/null "$SMARTLESS_CAPTURE_DIR" &> /dev/null
      fi
    ) &

    echo -e "${SMARTLESS_COLOR}... (more shown in $SMARTLESS_PAGER, captured in ${captureFilespec})${SMARTLESS_COLOR_OFF}"
    printf '%s\n%s\n' "$lines" "$line" > "$captureFilespec"
    { printf '%s\n%s\n' "$lines" "$line"; exec tee -a "$captureFilespec"; } | exec $SMARTLESS_PAGER $SMARTLESS_PAGER_ARGUMENTS "${lessArgs[@]}"
  else
    echo -e "${SMARTLESS_COLOR}... (more shown in $SMARTLESS_PAGER)${SMARTLESS_COLOR_OFF}"
    { printf '%s\n%s\n' "$lines" "$line"; exec cat; } | exec $SMARTLESS_PAGER $SMARTLESS_PAGER_ARGUMENTS "${lessArgs[@]}"
  fi
else
  printf '\n%s%s' "$earlyIncompleteLine" "$line"
fi
